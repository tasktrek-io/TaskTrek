# Use Alpine Linux with Node.js
FROM node:18-alpine AS base

# Install necessary system dependencies
RUN apk add --no-cache libc6-compat curl

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Copy root package files (monorepo workspace)
COPY package.json package-lock.json ./
COPY apps/api/package.json ./apps/api/

# Install all dependencies (for building)
RUN CI=true npm ci --no-audit --no-fund

# Production dependencies stage
FROM base AS prod-deps
WORKDIR /app

# Copy root package files (monorepo workspace)
COPY package.json package-lock.json ./
COPY apps/api/package.json ./apps/api/

# Install only production dependencies
RUN CI=true npm ci --omit=dev --no-audit --no-fund

# Build stage
FROM base AS builder
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package.json ./package.json

# Copy source code
COPY apps/api ./apps/api

# Build the application
RUN npm run build --workspace=apps/api

# Production stage
FROM base AS runner
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S apiuser -u 1001 -G nodejs

# Copy built application and production dependencies
COPY --from=prod-deps /app/node_modules ./node_modules
COPY --from=prod-deps /app/package.json ./package.json
COPY --from=builder /app/apps/api/dist ./apps/api/dist
COPY --from=builder /app/apps/api/package.json ./apps/api/

# Change ownership of the app directory
RUN chown -R apiuser:nodejs /app
USER apiuser

# Expose port
EXPOSE 5000

# Set environment to production
ENV NODE_ENV=production
ENV PORT=5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:5000/health || exit 1

# Start the application
CMD ["npm", "start", "--workspace=apps/api"]
