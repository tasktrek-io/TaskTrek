services:
  # API Service - Using pre-built image
  api:
    image: ${DOCKER_REGISTRY:-curiousram}/tasktrek-api:${IMAGE_TAG:-latest}
    container_name: tasktrek-api-prod
    env_file:
      - .env.prod
    ports:
      - "4000:4000"
    networks:
      - tasktrek-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Service - Using pre-built image
  web:
    image: ${DOCKER_REGISTRY:-curiousram}/tasktrek-web:${IMAGE_TAG:-latest}
    container_name: tasktrek-web-prod
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://3.110.108.184/api
      - NEXT_PUBLIC_WS_URL=ws://3.110.108.184
      - PORT=3000
    ports:
      - "3000:3000"
    networks:
      - tasktrek-network
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tasktrek-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      web:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - tasktrek-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  tasktrek-network:
    driver: bridge
